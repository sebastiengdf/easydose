<?php

namespace AppBundle\Repository;

use SensioLabs\Security\Result;

/**
 * PatientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatientRepository extends \Doctrine\ORM\EntityRepository
{
    
    

	public function getDoses(){
		$qb = $this->createQueryBuilder('p');
		$qb->innerJoin('p.examen', 'e')
		->innerJoin('e.region', 'r')
		//->innerJoin('r.regiondose', 'rd')
		//->innerJoin('rd.dose', 'd')
		->addselect('e')
		->addselect('r');
		
		return $qb->getQuery()->getResult();
		
	}
	
	
	
	public function getLastExamen($nb){
	    $qb = $this->createQueryBuilder('p');
	    $qb->innerJoin('p.examen', 'e')
	    ->addselect('p')
	    ->addselect('e.dateExamen')
	    ->setFirstResult(0)
	    ->setMaxResults(21)
	    ->orderBy('e.id', 'DESC');	    
	    return $qb->getQuery()->getResult();
	    
	}
	
	public function search($attrName,$attrvalue){
	    $qb = $this->createQueryBuilder('p');
	    $qb->select('p');
	    $qb->where('p.'.$attrName.' like :value');
	    $qb->orwhere('p.idregional like :value');
	    $qb->setMaxResults(10);
	    $qb->setFirstResult(0);
	    $qb->setParameter('value','%'.$attrvalue.'%');
	    return $qb->getQuery()->getResult();
	}
	public function getNbPatient(){
		$qb = $this->createQueryBuilder('p');
		$qb->select('p');
		$query=$qb->getQuery();
		//$query=$querybuilder->getQuery();
		$result=$query->getResult();
		return count($result);
	}
	
	public function getNbPatientSearch($patientnom,$patientprenom,$IPP,$IDR,$BD,$HDRV,$GENRE){
		$qb = $this->createQueryBuilder('p');
		$qb->select('p');
		$firstselect=false;
		if($patientnom and $patientnom<>'null'){
			$qb->where('p.nom like :patientnom')
			->setParameter('patientnom','%'.$patientnom.'%');
			$firstselect=true;
		}
		
		if($patientprenom and $patientprenom<>'null'){
			if(!$firstselect)
			{
				$qb->where('p.prenom like :patientprenom')
				->setParameter('patientprenom','%'.$patientprenom.'%');
				$firstselect=true;
			}else {
				$qb->andwhere('p.prenom like :patientprenom')
				->setParameter('patientprenom','%'.$patientprenom.'%');
			}
		}
	
		
		if($GENRE and ($GENRE==='HOMME' || $GENRE==='FEMME')){
			if(!$firstselect)
			{
				$qb->where('p.sex = :patientsex')
				->setParameter('patientsex',$GENRE);
				$firstselect=true;
			}else {
				$qb->andwhere('p.sex = :patientsex')
				->setParameter('patientsex',$GENRE);
			}
		}
		
		if($IPP and $IPP<>'null'){
			if(!$firstselect)
			{
				$qb->where('p.numipp like :numipp')
				->setParameter('numipp','%'.$IPP.'%');
				$firstselect=true;
			}else {
				$qb->andwhere('p.numipp like :numipp')
				->setParameter('numipp','%'.$IPP.'%');
			}
		}
		
		
		if($IDR and $IDR<>'null'){
			if(!$firstselect)
			{
				$qb->where('p.idregional like :IDR')
				->setParameter('IDR','%'.$IDR.'%');
				$firstselect=true;
			}else {
				$qb->andwhere('p.idregional like :IDR')
				->setParameter('IDR','%'.$IDR.'%');
			}
		}
		$query=$qb->getQuery();
		//$query=$querybuilder->getQuery();
		$result=$query->getResult();
		return count($result);
	}
	
	public function findPatient($min,$max){
	    $qb = $this->createQueryBuilder('p');
	    $qb->select('p');
	    $qb->where('p.id >= :min');
	    $qb->andwhere('p.id < :max');
	    $qb->setParameter('min',$min);
	    $qb->setParameter('max',$max);
	    $query=$qb->getQuery();	    
	    $result=$query->getResult();
	    return $result;
	}
	
	
	public function searchPatientFiltre($withradio,$withscan,$withmammo,$withnrd,$withpediatrie,$withpatientproc,$offset,$nbelement){
	    $qb = $this->createQueryBuilder('p');
	    $qb->select('p');
	    $qb->join('p.examen', 'e');
            $qb->addSelect('e');
	    $firstselect=false;
	    $firstselectradio=false;
	    $firstselectscan=false;
	    $firstselectmammo=false;
	    
	    if($withnrd){
	        
	        $qb->where('p.nrdhavealerte = :nrdhavealerte')
	        ->setParameter('nrdhavealerte',1);
	        $firstselect=true;
	    }
	    
	    if($withpediatrie){
	        if(!$firstselect)
	        {
	            $OldDate = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-15 year')) );	            
	            $qb->where('p.datenaissance > :startdate')
	            ->setParameter('startdate',$OldDate);
	            $firstselect=true;
	        }else{
	            $OldDate = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-15 year')) );
	            $qb->andwhere('p.datenaissance >= :startdate')
	            ->setParameter('startdate',$OldDate);
	        }
	    }
	    
	    if($withpatientproc){
	        if(!$firstselect)
	        {
	            
	            $Date15 = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-15 year')) );
	            $Date50 = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-50 year')) );
	            
	            $qb->where('p.datenaissance BETWEEN :startdate1 and :enddate1');
	            
	            $qb->andwhere('p.sex = :sex')
	            ->setParameter('startdate1',$Date50)
	            ->setParameter('enddate1',$Date15)
	            ->setParameter('sex','FEMME');
	            $firstselect=true;
	        }else{
	            $Date15 = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-15 year')) );
	            $Date50 = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-50 year')) );
	            
	            $qb->andwhere('p.datenaissance BETWEEN :startdate1 and :enddate1');
	           
	            $qb->andwhere('p.sex = :sex')
	            ->setParameter('startdate1',$Date50)
	            ->setParameter('enddate1',$Date15)
	            ->setParameter('sex','FEMME');
	        }
	    }
	    
	    if($withmammo){
	        if(!$firstselect)
	        {
	            
	            $qb->join('e.region', 'r');
	            $qb->join('r.regiondose', 'rd');
	            $qb->join('rd.dose', 'd');
	            $qb->where('d.modalite = :modalite');
	            $qb->setParameter('modalite','MG');
	            $firstselect=true;
	            $firstselectmammo=true;
	        }else{
	            
	            $qb->join('e.region', 'r');
	            $qb->join('r.regiondose', 'rd');
	            $qb->join('rd.dose', 'd');
	            $qb->andwhere('d.modalite = :modalite');
	            $qb->setParameter('modalite','MG');
	            $firstselectmammo=true;
	        }
	    }
	    
	    
	    if($withradio){
	        if(!$firstselect)
	        {
	            if(!$firstselectmammo){
	                
	                $qb->join('e.region', 'r');
	                $qb->join('r.regiondose', 'rd');
	                $qb->join('rd.dose', 'd');
	            }
	            $qb->where('d.modalite = :modalite1');
	            $qb->andwhere('d.unite like :unite1');
	            $qb->setParameter('modalite1','SR');
	            $qb->setParameter('unite1','%2%');
	            $firstselect=true;
	            $firstselectradio=true;
	        }else{
	            
	            if(!$firstselectmammo){
	                
	                $qb->join('e.region', 'r');
	                $qb->join('r.regiondose', 'rd');
	                $qb->join('rd.dose', 'd');
	            }
	            $qb->andwhere('d.modalite = :modalite1');
	            $qb->andwhere('d.unite like :unite1');
	            $qb->setParameter('modalite1','SR');
	            $qb->setParameter('unite1','%2%');
	            $firstselectradio=true;
	        }
	    }
	    
	    if($withscan){
	        if(!$firstselect)
	        {
	            if(!$firstselectmammo && !$firstselectradio){
	                
	                $qb->join('e.region', 'r');
	                $qb->join('r.regiondose', 'rd');
	                $qb->join('rd.dose', 'd');
	            }
	            $qb->where('d.modalite = :modalite2');
	            $qb->andwhere('d.unite = :unite2');
	            $qb->setParameter('modalite2','SR');
	            $qb->setParameter('unite2','mGy.cm');
	            $firstselect=true;
	            $firstselectscan=true;
	        }else{
	            if(!$firstselectmammo && !$firstselectradio){
	                
	                $qb->join('e.region', 'r');
	                $qb->join('r.regiondose', 'rd');
	                $qb->join('rd.dose', 'd');
	            }
	            $qb->andwhere('d.modalite = :modalite2');
	            $qb->andwhere('d.unite = :unite2');
	            $qb->setParameter('modalite2','SR');
	            $qb->setParameter('unite2','mGy.cm');
	            $firstselectscan=true;
	        }
	    }
	    
	    
	   // dump($qb->getQuery());
	    //die;
	    $qb->setMaxResults($nbelement);
	    $qb->setFirstResult($offset);
	    $qb->orderBy('e.id', 'DESC');
	    //$qb->orderBy('p.id', 'DESC');
	    $qb->distinct('p.id');
	    $query=$qb->getQuery();
	    //$query=$querybuilder->getQuery();
	    $result=$query->getResult();
	    //dump($query);
	    //dump($result);
	    //die;
	    return $result;
	}
	
	
	
	
	
	public function getNBPatientFiltre($withradio,$withscan,$withmammo,$withnrd,$withpediatrie,$withpatientproc){
	    $qb = $this->createQueryBuilder('p');
	    $qb->select('COUNT(p)');
	    $qb->join('p.examen', 'e');
	    $firstselect=false;
	    $firstselectradio=false;
	    $firstselectscan=false;
	    $firstselectmammo=false;
	   
	    
	    
	    if($withnrd){
	        
	        $qb->where('p.nrdhavealerte = :nrdhavealerte')
	        ->setParameter('nrdhavealerte',1);
	        $firstselect=true;
	    }
	    
	    if($withpediatrie){
	        if(!$firstselect)
	        {
	            $OldDate = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-15 year')) );
	            $qb->where('p.datenaissance > :startdate')
	            ->setParameter('startdate',$OldDate);
	            $firstselect=true;
	        }else{
	            $OldDate = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-15 year')) );
	            $qb->andwhere('p.datenaissance >= :startdate')
	            ->setParameter('startdate',$OldDate);
	        }
	    }
	    
	    if($withpatientproc){
	        if(!$firstselect)
	        {
	            
	            $Date15 = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-15 year')) );
	            $Date50 = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-50 year')) );
	            
	            $qb->where('p.datenaissance BETWEEN :startdate1 and :enddate1');
	            
	            $qb->andwhere('p.sex = :sex')
	            ->setParameter('startdate1',$Date50)
	            ->setParameter('enddate1',$Date15)
	            ->setParameter('sex','FEMME');
	            $firstselect=true;
	        }else{
	            $Date15 = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-15 year')) );
	            $Date50 = \DateTime::createFromFormat( "Y-m-d H:i:s", date("Y-m-d 00:00:00", strtotime('-50 year')) );
	            
	            $qb->andwhere('p.datenaissance BETWEEN :startdate1 and :enddate1');
	            
	            $qb->andwhere('p.sex = :sex')
	            ->setParameter('startdate1',$Date50)
	            ->setParameter('enddate1',$Date15)
	            ->setParameter('sex','FEMME');
	        }
	    }
	    
	    if($withmammo){
	        if(!$firstselect)
	        {
	            
	            $qb->join('e.region', 'r');
	            $qb->join('r.regiondose', 'rd');
	            $qb->join('rd.dose', 'd');
	            $qb->where('d.modalite = :modalite');
	            $qb->setParameter('modalite','MG');
	            $firstselect=true;
	            $firstselectmammo=true;
	        }else{
	            
	            $qb->join('e.region', 'r');
	            $qb->join('r.regiondose', 'rd');
	            $qb->join('rd.dose', 'd');
	            $qb->andwhere('d.modalite = :modalite');
	            $qb->setParameter('modalite','MG');
	            $firstselectmammo=true;
	        }
	    }
	    
	    
	    if($withradio){
	        if(!$firstselect)
	        {
	            if(!$firstselectmammo){
	                
	                $qb->join('e.region', 'r');
	                $qb->join('r.regiondose', 'rd');
	                $qb->join('rd.dose', 'd');
	            }
	            $qb->where('d.modalite = :modalite1');
	            $qb->andwhere('d.unite like :unite1');
	            $qb->setParameter('modalite1','SR');
	            $qb->setParameter('unite1','%2%');
	            $firstselect=true;
	            $firstselectradio=true;
	        }else{
	            
	            if(!$firstselectmammo){
	                
	                $qb->join('e.region', 'r');
	                $qb->join('r.regiondose', 'rd');
	                $qb->join('rd.dose', 'd');
	            }
	            $qb->andwhere('d.modalite = :modalite1');
	            $qb->andwhere('d.unite like :unite1');
	            $qb->setParameter('modalite1','SR');
	            $qb->setParameter('unite1','%2%');
	            $firstselectradio=true;
	        }
	    }
	    
	    if($withscan){
	        if(!$firstselect)
	        {
	            if(!$firstselectmammo && !$firstselectradio){
	                
	                $qb->join('e.region', 'r');
	                $qb->join('r.regiondose', 'rd');
	                $qb->join('rd.dose', 'd');
	            }
	            $qb->where('d.modalite = :modalite2');
	            $qb->andwhere('d.unite = :unite2');
	            $qb->setParameter('modalite2','SR');
	            $qb->setParameter('unite2','mGy.cm');
	            $firstselect=true;
	            $firstselectscan=true;
	        }else{
	            if(!$firstselectmammo && !$firstselectradio){
	                
	                $qb->join('e.region', 'r');
	                $qb->join('r.regiondose', 'rd');
	                $qb->join('rd.dose', 'd');
	            }
	            $qb->andwhere('d.modalite = :modalite2');
	            $qb->andwhere('d.unite = :unite2');
	            $qb->setParameter('modalite2','SR');
	            $qb->setParameter('unite2','mGy.cm');
	            $firstselectscan=true;
	        }
	    }
	    
	    $qb->orderBy('e.dateExamen', 'DESC');
	    $qb->orderBy('p.id', 'DESC');
	    $qb->distinct('p.id');
	    $query=$qb->getQuery();
	    //$query=$querybuilder->getQuery();
	    $result=$query->getSingleScalarResult();
	    return $result;
	}
	
	public function searchPatient($patientnom,$patientprenom,$IPP,$IDR,$BD,$HDRV,$GENRE){
		$qb = $this->createQueryBuilder('p');
		$qb->select('p');
		$firstselect=false;
		if($patientnom and $patientnom<>'null'){
			$qb->where('p.nom like :patientnom')
			->setParameter('patientnom','%'.$patientnom.'%');
			$firstselect=true;
		}
		
		if($patientprenom and $patientprenom<>'null'){
			if(!$firstselect)
			{
				$qb->where('p.prenom like :patientprenom')
				->setParameter('patientprenom','%'.$patientprenom.'%');
				$firstselect=true;
			}else {
				$qb->andwhere('p.prenom like :patientprenom')
				->setParameter('patientprenom','%'.$patientprenom.'%');
			}
		}
		
		if($GENRE and ($GENRE==='HOMME' || $GENRE==='FEMME')){
			if(!$firstselect)
			{
				$qb->where('p.sex = :patientsex')
				->setParameter('patientsex',$GENRE);
				$firstselect=true;
			}else {
				$qb->andwhere('p.sex = :patientsex')
				->setParameter('patientsex',$GENRE);
			}
		}
		if($IPP and $IPP<>'null'){
			if(!$firstselect)
			{
				$qb->where('p.numipp like :numipp')
				->setParameter('numipp','%'.$IPP.'%');
				$firstselect=true;
			}else {
				$qb->andwhere('p.numipp like :numipp')
				->setParameter('numipp','%'.$IPP.'%');
			}
		}
		
		
		if($IDR and $IDR<>'null'){
			if(!$firstselect)
			{
				$qb->where('p.idregional like :IDR')
				->setParameter('IDR','%'.$IDR.'%');
				$firstselect=true;
			}else {
				$qb->andwhere('p.idregional like :IDR')
				->setParameter('IDR','%'.$IDR.'%');
			}
		}
		
		
		$query=$qb->getQuery();
		//$query=$querybuilder->getQuery();
		$result=$query->getResult();
		return $result;
		
		
		
	}
	
	
	public function GreatsearchPatient($criteres){
	
		$resultats=[];
		foreach ($criteres as $critere){
			$qb = $this->createQueryBuilder('p');
			$resultat=$qb->where('p.nom like :ds1')
			->orWhere('p.prenom like :ds2')
			->orWhere('p.numipp like :ds3')
			->orWhere('p.sex like :ds4')
			->orWhere('p.idregional like :ds5')
			->orWhere('p.datenaissance like :ds6')
			->orWhere('p.age like :ds7')
			->setParameter('ds1','%'.$critere.'%')
			->setParameter('ds2','%'.$critere.'%')
			->setParameter('ds3','%'.$critere.'%')
			->setParameter('ds4','%'.$critere.'%')
			->setParameter('ds5','%'.$critere.'%')
			->setParameter('ds6','%'.$critere.'%')
			->setParameter('ds7','%'.$critere.'%')
			->getQuery()->getResult();
			$resultats=array_merge($resultats,$resultat);
		}
	
		return $resultats;
	}
}
